{"version":3,"sources":["Components/MoneyComp.js","Containers/MoneyDispenser.js","serviceWorker.js","index.js"],"names":["MoneyComp","state","amount","handleChange","fieldName","event","setState","target","value","handleSubmit","e","preventDefault","props","dispensedNotesContent","dispensedNotes","this","totalNotes","length","map","numberOfNotes","className","key","denomination","onSubmit","noValidate","autoComplete","htmlFor","id","label","onChange","margin","type","name","Component","MoneyDispenser","availableDenominations","remainingAmount","currentDenominationIndex","Math","floor","push","reverse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPA8EeA,E,2MAxEbC,MAAQ,CACNC,OAAQ,I,EAIVC,aAAe,SAAAC,GAAS,OAAI,SAAAC,GAC1B,EAAKC,SAAL,eAAiBF,EAAYC,EAAME,OAAOC,U,EAG5CC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,MAAMH,aAAa,EAAKR,MAAMC,S,wEAG3B,IAGJW,EAFIC,EAAmBC,KAAKH,MAAxBE,eACJE,EAAa,EASjB,OAPIF,EAAeG,SACjBJ,EAAwBC,EAAeI,KAAI,SAACV,GAE1C,OADAQ,GAAcR,EAAMW,cACZ,yBAAKC,UAAU,WAAWC,IAAKb,EAAMc,cAArC,UAAuDd,EAAMW,cAA7D,wBAA0FX,EAAMc,mBAK1G,oCACE,6BAASF,UAAU,YACf,oDAIJ,iCACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,SACb,8CACA,0BAAMG,SAAUR,KAAKN,aAAce,YAAU,EAACC,aAAa,OACzD,2BAAOC,QAAQ,UAAf,oBACA,2BACEC,GAAG,SACHC,MAAM,mBACNpB,MAAOO,KAAKd,MAAMC,OAClB2B,SAAUd,KAAKZ,aAAa,UAC5B2B,OAAO,SACPC,KAAK,SACLC,KAAK,WAEP,6BACE,4BACED,KAAK,SAASX,UAAU,aAD1B,iBASR,yBAAKA,UAAU,aACyB,IAArCL,KAAKH,MAAME,eAAeG,QAAgB,yBAAKG,UAAU,SACxD,iEACA,6BAAMP,GACN,wBAAIO,UAAU,aAAd,0BAAkDJ,W,GA9DxCiB,aC2BTC,E,2MA5BdjC,MAAQ,CACPkC,uBAAwB,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,KACpDrB,eAAgB,I,EAGjBL,aAAe,SAACP,GAIf,IAHA,IAAIkC,GAAmBlC,EACnBmC,EAA2B,EAAKpC,MAAMkC,uBAAuBlB,OAAS,EACpEH,EAAiB,GAChBsB,GAAiB,CACvB,IAAMjB,EAAgBmB,KAAKC,MAAMH,EAAkB,EAAKnC,MAAMkC,uBAAuBE,IACjFlB,EAAgB,IACnBiB,GAAoC,EAAKnC,MAAMkC,uBAAuBE,IAEvEvB,EAAe0B,KAAK,CACnBlB,aAAc,EAAKrB,MAAMkC,uBAAuBE,GAChDlB,oBAECkB,EAEH,EAAK/B,SAAS,CAAEQ,eAAgBA,EAAe2B,a,wEAI/C,OAAO,kBAAC,EAAD,CAAW3B,eAAgBC,KAAKd,MAAMa,eAAgBL,aAAcM,KAAKN,mB,GAzBrDwB,aCSTS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAoBC,SAASC,eAAe,SD2HtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1e2e97f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n\r\n\r\nclass MoneyComp extends Component {\r\n  state = {\r\n    amount: '',\r\n  }\r\n\r\n  // handles change in form input field\r\n  handleChange = fieldName => event => {\r\n    this.setState({ [fieldName]: event.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.handleSubmit(this.state.amount);\r\n  }\r\n\r\n  render() {\r\n    const { dispensedNotes } = this.props;\r\n    let totalNotes = 0;\r\n    let dispensedNotesContent;\r\n    if (dispensedNotes.length) {\r\n      dispensedNotesContent = dispensedNotes.map((value) => {\r\n        totalNotes += value.numberOfNotes;\r\n        return (<div className=\"ListItem\" key={value.denomination}>{`${value.numberOfNotes} notes of Rs ${value.denomination}`}</div>)\r\n      })\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <section className=\"sec-head\">\r\n            <h1>\r\n                ATM Money Dispenser\r\n            </h1>\r\n        </section>\r\n        <section>\r\n          <div className=\"atm-section\">\r\n            <div className=\"paper\">\r\n              <h2>Welcome to ATM</h2>\r\n              <form onSubmit={this.handleSubmit} noValidate autoComplete=\"off\">\r\n                <label htmlFor=\"amount\">Enter the Amount</label>\r\n                <input\r\n                  id=\"amount\"\r\n                  label=\"Enter the Amount\"\r\n                  value={this.state.amount}\r\n                  onChange={this.handleChange('amount')}\r\n                  margin=\"normal\"\r\n                  type=\"number\"\r\n                  name=\"amount\"\r\n                />\r\n                <div>\r\n                  <button\r\n                    type=\"submit\" className=\"pri-color\"\r\n                  >\r\n                    Get Money\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div className=\"notes-sec\">\r\n            {this.props.dispensedNotes.length !== 0 && <div className=\"paper\">\r\n              <h4>You will get the following amount</h4>\r\n              <div>{dispensedNotesContent}</div>\r\n              <h4 className=\"total-dis\">Total notes dispensed: {totalNotes}</h4>\r\n            </div>}\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default MoneyComp;","import React, { Component } from 'react';\r\nimport MoneyComp from '../Components/MoneyComp'\r\n\r\nclass MoneyDispenser extends Component {\r\n\tstate = {\r\n\t\tavailableDenominations: [1,2,5,10,20,50,100,200,500,2000],\r\n\t\tdispensedNotes: [],\r\n\t}\r\n\r\n\thandleSubmit = (amount) => {\r\n\t\tlet remainingAmount = +amount;\r\n\t\tlet currentDenominationIndex = this.state.availableDenominations.length - 1;\r\n\t\tconst dispensedNotes = [];\r\n\t\twhile (remainingAmount) {\r\n\t\t\tconst numberOfNotes = Math.floor(remainingAmount / this.state.availableDenominations[currentDenominationIndex]);\r\n\t\t\tif (numberOfNotes > 0) {\r\n\t\t\t\tremainingAmount = remainingAmount % this.state.availableDenominations[currentDenominationIndex];\r\n\t\t\t}\r\n\t\t\tdispensedNotes.push({\r\n\t\t\t\tdenomination: this.state.availableDenominations[currentDenominationIndex],\r\n\t\t\t\tnumberOfNotes,\r\n\t\t\t})\r\n\t\t\t--currentDenominationIndex;\r\n\t\t}\r\n\t\tthis.setState({ dispensedNotes: dispensedNotes.reverse() });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(<MoneyComp dispensedNotes={this.state.dispensedNotes} handleSubmit={this.handleSubmit} />);\r\n\t}\r\n}\r\n\r\nexport default MoneyDispenser;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MoneyDispenser from './Containers/MoneyDispenser';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MoneyDispenser />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}